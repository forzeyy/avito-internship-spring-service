// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/forzeyy/avito-internship-spring-service/internal/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ReceptionRepo is an autogenerated mock type for the ReceptionRepo type
type ReceptionRepo struct {
	mock.Mock
}

type ReceptionRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *ReceptionRepo) EXPECT() *ReceptionRepo_Expecter {
	return &ReceptionRepo_Expecter{mock: &_m.Mock}
}

// CloseLastReception provides a mock function with given fields: ctx, pvzID
func (_m *ReceptionRepo) CloseLastReception(ctx context.Context, pvzID uuid.UUID) (*models.Reception, error) {
	ret := _m.Called(ctx, pvzID)

	if len(ret) == 0 {
		panic("no return value specified for CloseLastReception")
	}

	var r0 *models.Reception
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Reception, error)); ok {
		return rf(ctx, pvzID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Reception); ok {
		r0 = rf(ctx, pvzID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Reception)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, pvzID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReceptionRepo_CloseLastReception_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseLastReception'
type ReceptionRepo_CloseLastReception_Call struct {
	*mock.Call
}

// CloseLastReception is a helper method to define mock.On call
//   - ctx context.Context
//   - pvzID uuid.UUID
func (_e *ReceptionRepo_Expecter) CloseLastReception(ctx interface{}, pvzID interface{}) *ReceptionRepo_CloseLastReception_Call {
	return &ReceptionRepo_CloseLastReception_Call{Call: _e.mock.On("CloseLastReception", ctx, pvzID)}
}

func (_c *ReceptionRepo_CloseLastReception_Call) Run(run func(ctx context.Context, pvzID uuid.UUID)) *ReceptionRepo_CloseLastReception_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ReceptionRepo_CloseLastReception_Call) Return(_a0 *models.Reception, _a1 error) *ReceptionRepo_CloseLastReception_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReceptionRepo_CloseLastReception_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.Reception, error)) *ReceptionRepo_CloseLastReception_Call {
	_c.Call.Return(run)
	return _c
}

// CreateReception provides a mock function with given fields: ctx, reception
func (_m *ReceptionRepo) CreateReception(ctx context.Context, reception *models.Reception) error {
	ret := _m.Called(ctx, reception)

	if len(ret) == 0 {
		panic("no return value specified for CreateReception")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Reception) error); ok {
		r0 = rf(ctx, reception)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReceptionRepo_CreateReception_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateReception'
type ReceptionRepo_CreateReception_Call struct {
	*mock.Call
}

// CreateReception is a helper method to define mock.On call
//   - ctx context.Context
//   - reception *models.Reception
func (_e *ReceptionRepo_Expecter) CreateReception(ctx interface{}, reception interface{}) *ReceptionRepo_CreateReception_Call {
	return &ReceptionRepo_CreateReception_Call{Call: _e.mock.On("CreateReception", ctx, reception)}
}

func (_c *ReceptionRepo_CreateReception_Call) Run(run func(ctx context.Context, reception *models.Reception)) *ReceptionRepo_CreateReception_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Reception))
	})
	return _c
}

func (_c *ReceptionRepo_CreateReception_Call) Return(_a0 error) *ReceptionRepo_CreateReception_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReceptionRepo_CreateReception_Call) RunAndReturn(run func(context.Context, *models.Reception) error) *ReceptionRepo_CreateReception_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastOpenReception provides a mock function with given fields: ctx, pvzID
func (_m *ReceptionRepo) GetLastOpenReception(ctx context.Context, pvzID uuid.UUID) (*models.Reception, error) {
	ret := _m.Called(ctx, pvzID)

	if len(ret) == 0 {
		panic("no return value specified for GetLastOpenReception")
	}

	var r0 *models.Reception
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*models.Reception, error)); ok {
		return rf(ctx, pvzID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *models.Reception); ok {
		r0 = rf(ctx, pvzID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Reception)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, pvzID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReceptionRepo_GetLastOpenReception_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastOpenReception'
type ReceptionRepo_GetLastOpenReception_Call struct {
	*mock.Call
}

// GetLastOpenReception is a helper method to define mock.On call
//   - ctx context.Context
//   - pvzID uuid.UUID
func (_e *ReceptionRepo_Expecter) GetLastOpenReception(ctx interface{}, pvzID interface{}) *ReceptionRepo_GetLastOpenReception_Call {
	return &ReceptionRepo_GetLastOpenReception_Call{Call: _e.mock.On("GetLastOpenReception", ctx, pvzID)}
}

func (_c *ReceptionRepo_GetLastOpenReception_Call) Run(run func(ctx context.Context, pvzID uuid.UUID)) *ReceptionRepo_GetLastOpenReception_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ReceptionRepo_GetLastOpenReception_Call) Return(_a0 *models.Reception, _a1 error) *ReceptionRepo_GetLastOpenReception_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReceptionRepo_GetLastOpenReception_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*models.Reception, error)) *ReceptionRepo_GetLastOpenReception_Call {
	_c.Call.Return(run)
	return _c
}

// NewReceptionRepo creates a new instance of ReceptionRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReceptionRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReceptionRepo {
	mock := &ReceptionRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
