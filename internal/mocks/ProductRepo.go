// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/forzeyy/avito-internship-spring-service/internal/models"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ProductRepo is an autogenerated mock type for the ProductRepo type
type ProductRepo struct {
	mock.Mock
}

type ProductRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *ProductRepo) EXPECT() *ProductRepo_Expecter {
	return &ProductRepo_Expecter{mock: &_m.Mock}
}

// AddProduct provides a mock function with given fields: ctx, product
func (_m *ProductRepo) AddProduct(ctx context.Context, product *models.Product) error {
	ret := _m.Called(ctx, product)

	if len(ret) == 0 {
		panic("no return value specified for AddProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Product) error); ok {
		r0 = rf(ctx, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProductRepo_AddProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProduct'
type ProductRepo_AddProduct_Call struct {
	*mock.Call
}

// AddProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - product *models.Product
func (_e *ProductRepo_Expecter) AddProduct(ctx interface{}, product interface{}) *ProductRepo_AddProduct_Call {
	return &ProductRepo_AddProduct_Call{Call: _e.mock.On("AddProduct", ctx, product)}
}

func (_c *ProductRepo_AddProduct_Call) Run(run func(ctx context.Context, product *models.Product)) *ProductRepo_AddProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Product))
	})
	return _c
}

func (_c *ProductRepo_AddProduct_Call) Return(_a0 error) *ProductRepo_AddProduct_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProductRepo_AddProduct_Call) RunAndReturn(run func(context.Context, *models.Product) error) *ProductRepo_AddProduct_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLastProduct provides a mock function with given fields: ctx, pvzID
func (_m *ProductRepo) DeleteLastProduct(ctx context.Context, pvzID uuid.UUID) error {
	ret := _m.Called(ctx, pvzID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLastProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, pvzID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProductRepo_DeleteLastProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLastProduct'
type ProductRepo_DeleteLastProduct_Call struct {
	*mock.Call
}

// DeleteLastProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - pvzID uuid.UUID
func (_e *ProductRepo_Expecter) DeleteLastProduct(ctx interface{}, pvzID interface{}) *ProductRepo_DeleteLastProduct_Call {
	return &ProductRepo_DeleteLastProduct_Call{Call: _e.mock.On("DeleteLastProduct", ctx, pvzID)}
}

func (_c *ProductRepo_DeleteLastProduct_Call) Run(run func(ctx context.Context, pvzID uuid.UUID)) *ProductRepo_DeleteLastProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ProductRepo_DeleteLastProduct_Call) Return(_a0 error) *ProductRepo_DeleteLastProduct_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProductRepo_DeleteLastProduct_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *ProductRepo_DeleteLastProduct_Call {
	_c.Call.Return(run)
	return _c
}

// NewProductRepo creates a new instance of ProductRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductRepo {
	mock := &ProductRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
