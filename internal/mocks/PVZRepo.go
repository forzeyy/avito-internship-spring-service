// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/forzeyy/avito-internship-spring-service/internal/models"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// PVZRepo is an autogenerated mock type for the PVZRepo type
type PVZRepo struct {
	mock.Mock
}

type PVZRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *PVZRepo) EXPECT() *PVZRepo_Expecter {
	return &PVZRepo_Expecter{mock: &_m.Mock}
}

// CreatePVZ provides a mock function with given fields: ctx, pvz
func (_m *PVZRepo) CreatePVZ(ctx context.Context, pvz *models.PVZ) error {
	ret := _m.Called(ctx, pvz)

	if len(ret) == 0 {
		panic("no return value specified for CreatePVZ")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.PVZ) error); ok {
		r0 = rf(ctx, pvz)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PVZRepo_CreatePVZ_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePVZ'
type PVZRepo_CreatePVZ_Call struct {
	*mock.Call
}

// CreatePVZ is a helper method to define mock.On call
//   - ctx context.Context
//   - pvz *models.PVZ
func (_e *PVZRepo_Expecter) CreatePVZ(ctx interface{}, pvz interface{}) *PVZRepo_CreatePVZ_Call {
	return &PVZRepo_CreatePVZ_Call{Call: _e.mock.On("CreatePVZ", ctx, pvz)}
}

func (_c *PVZRepo_CreatePVZ_Call) Run(run func(ctx context.Context, pvz *models.PVZ)) *PVZRepo_CreatePVZ_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.PVZ))
	})
	return _c
}

func (_c *PVZRepo_CreatePVZ_Call) Return(_a0 error) *PVZRepo_CreatePVZ_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PVZRepo_CreatePVZ_Call) RunAndReturn(run func(context.Context, *models.PVZ) error) *PVZRepo_CreatePVZ_Call {
	_c.Call.Return(run)
	return _c
}

// GetPVZs provides a mock function with given fields: ctx, startDate, endDate, page, limit
func (_m *PVZRepo) GetPVZs(ctx context.Context, startDate *time.Time, endDate *time.Time, page int, limit int) ([]models.PVZ, error) {
	ret := _m.Called(ctx, startDate, endDate, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetPVZs")
	}

	var r0 []models.PVZ
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *time.Time, *time.Time, int, int) ([]models.PVZ, error)); ok {
		return rf(ctx, startDate, endDate, page, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *time.Time, *time.Time, int, int) []models.PVZ); ok {
		r0 = rf(ctx, startDate, endDate, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.PVZ)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *time.Time, *time.Time, int, int) error); ok {
		r1 = rf(ctx, startDate, endDate, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PVZRepo_GetPVZs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPVZs'
type PVZRepo_GetPVZs_Call struct {
	*mock.Call
}

// GetPVZs is a helper method to define mock.On call
//   - ctx context.Context
//   - startDate *time.Time
//   - endDate *time.Time
//   - page int
//   - limit int
func (_e *PVZRepo_Expecter) GetPVZs(ctx interface{}, startDate interface{}, endDate interface{}, page interface{}, limit interface{}) *PVZRepo_GetPVZs_Call {
	return &PVZRepo_GetPVZs_Call{Call: _e.mock.On("GetPVZs", ctx, startDate, endDate, page, limit)}
}

func (_c *PVZRepo_GetPVZs_Call) Run(run func(ctx context.Context, startDate *time.Time, endDate *time.Time, page int, limit int)) *PVZRepo_GetPVZs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*time.Time), args[2].(*time.Time), args[3].(int), args[4].(int))
	})
	return _c
}

func (_c *PVZRepo_GetPVZs_Call) Return(_a0 []models.PVZ, _a1 error) *PVZRepo_GetPVZs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PVZRepo_GetPVZs_Call) RunAndReturn(run func(context.Context, *time.Time, *time.Time, int, int) ([]models.PVZ, error)) *PVZRepo_GetPVZs_Call {
	_c.Call.Return(run)
	return _c
}

// NewPVZRepo creates a new instance of PVZRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPVZRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *PVZRepo {
	mock := &PVZRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
