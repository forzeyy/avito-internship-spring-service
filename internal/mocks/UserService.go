// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// DummyLogin provides a mock function with given fields: ctx, role
func (_m *UserService) DummyLogin(ctx context.Context, role string) (string, error) {
	ret := _m.Called(ctx, role)

	if len(ret) == 0 {
		panic("no return value specified for DummyLogin")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, role)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, role)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_DummyLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DummyLogin'
type UserService_DummyLogin_Call struct {
	*mock.Call
}

// DummyLogin is a helper method to define mock.On call
//   - ctx context.Context
//   - role string
func (_e *UserService_Expecter) DummyLogin(ctx interface{}, role interface{}) *UserService_DummyLogin_Call {
	return &UserService_DummyLogin_Call{Call: _e.mock.On("DummyLogin", ctx, role)}
}

func (_c *UserService_DummyLogin_Call) Run(run func(ctx context.Context, role string)) *UserService_DummyLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserService_DummyLogin_Call) Return(_a0 string, _a1 error) *UserService_DummyLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_DummyLogin_Call) RunAndReturn(run func(context.Context, string) (string, error)) *UserService_DummyLogin_Call {
	_c.Call.Return(run)
	return _c
}

// LoginUser provides a mock function with given fields: ctx, email, password
func (_m *UserService) LoginUser(ctx context.Context, email string, password string) (string, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_LoginUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginUser'
type UserService_LoginUser_Call struct {
	*mock.Call
}

// LoginUser is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
func (_e *UserService_Expecter) LoginUser(ctx interface{}, email interface{}, password interface{}) *UserService_LoginUser_Call {
	return &UserService_LoginUser_Call{Call: _e.mock.On("LoginUser", ctx, email, password)}
}

func (_c *UserService_LoginUser_Call) Run(run func(ctx context.Context, email string, password string)) *UserService_LoginUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserService_LoginUser_Call) Return(_a0 string, _a1 error) *UserService_LoginUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_LoginUser_Call) RunAndReturn(run func(context.Context, string, string) (string, error)) *UserService_LoginUser_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterUser provides a mock function with given fields: ctx, email, password, role
func (_m *UserService) RegisterUser(ctx context.Context, email string, password string, role string) error {
	ret := _m.Called(ctx, email, password, role)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, email, password, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserService_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type UserService_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
//   - role string
func (_e *UserService_Expecter) RegisterUser(ctx interface{}, email interface{}, password interface{}, role interface{}) *UserService_RegisterUser_Call {
	return &UserService_RegisterUser_Call{Call: _e.mock.On("RegisterUser", ctx, email, password, role)}
}

func (_c *UserService_RegisterUser_Call) Run(run func(ctx context.Context, email string, password string, role string)) *UserService_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *UserService_RegisterUser_Call) Return(_a0 error) *UserService_RegisterUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserService_RegisterUser_Call) RunAndReturn(run func(context.Context, string, string, string) error) *UserService_RegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
