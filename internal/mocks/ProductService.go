// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/forzeyy/avito-internship-spring-service/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// ProductService is an autogenerated mock type for the ProductService type
type ProductService struct {
	mock.Mock
}

type ProductService_Expecter struct {
	mock *mock.Mock
}

func (_m *ProductService) EXPECT() *ProductService_Expecter {
	return &ProductService_Expecter{mock: &_m.Mock}
}

// AddProduct provides a mock function with given fields: ctx, productType, pvzID
func (_m *ProductService) AddProduct(ctx context.Context, productType string, pvzID string) (*models.Product, error) {
	ret := _m.Called(ctx, productType, pvzID)

	if len(ret) == 0 {
		panic("no return value specified for AddProduct")
	}

	var r0 *models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.Product, error)); ok {
		return rf(ctx, productType, pvzID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.Product); ok {
		r0 = rf(ctx, productType, pvzID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, productType, pvzID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductService_AddProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProduct'
type ProductService_AddProduct_Call struct {
	*mock.Call
}

// AddProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - productType string
//   - pvzID string
func (_e *ProductService_Expecter) AddProduct(ctx interface{}, productType interface{}, pvzID interface{}) *ProductService_AddProduct_Call {
	return &ProductService_AddProduct_Call{Call: _e.mock.On("AddProduct", ctx, productType, pvzID)}
}

func (_c *ProductService_AddProduct_Call) Run(run func(ctx context.Context, productType string, pvzID string)) *ProductService_AddProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ProductService_AddProduct_Call) Return(_a0 *models.Product, _a1 error) *ProductService_AddProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductService_AddProduct_Call) RunAndReturn(run func(context.Context, string, string) (*models.Product, error)) *ProductService_AddProduct_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLastProduct provides a mock function with given fields: ctx, pvzID
func (_m *ProductService) DeleteLastProduct(ctx context.Context, pvzID string) error {
	ret := _m.Called(ctx, pvzID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLastProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, pvzID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProductService_DeleteLastProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLastProduct'
type ProductService_DeleteLastProduct_Call struct {
	*mock.Call
}

// DeleteLastProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - pvzID string
func (_e *ProductService_Expecter) DeleteLastProduct(ctx interface{}, pvzID interface{}) *ProductService_DeleteLastProduct_Call {
	return &ProductService_DeleteLastProduct_Call{Call: _e.mock.On("DeleteLastProduct", ctx, pvzID)}
}

func (_c *ProductService_DeleteLastProduct_Call) Run(run func(ctx context.Context, pvzID string)) *ProductService_DeleteLastProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProductService_DeleteLastProduct_Call) Return(_a0 error) *ProductService_DeleteLastProduct_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProductService_DeleteLastProduct_Call) RunAndReturn(run func(context.Context, string) error) *ProductService_DeleteLastProduct_Call {
	_c.Call.Return(run)
	return _c
}

// NewProductService creates a new instance of ProductService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductService {
	mock := &ProductService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
