// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// AuthUtil is an autogenerated mock type for the AuthUtil type
type AuthUtil struct {
	mock.Mock
}

type AuthUtil_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthUtil) EXPECT() *AuthUtil_Expecter {
	return &AuthUtil_Expecter{mock: &_m.Mock}
}

// CheckPassword provides a mock function with given fields: hashed, plain
func (_m *AuthUtil) CheckPassword(hashed string, plain string) bool {
	ret := _m.Called(hashed, plain)

	if len(ret) == 0 {
		panic("no return value specified for CheckPassword")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(hashed, plain)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// AuthUtil_CheckPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckPassword'
type AuthUtil_CheckPassword_Call struct {
	*mock.Call
}

// CheckPassword is a helper method to define mock.On call
//   - hashed string
//   - plain string
func (_e *AuthUtil_Expecter) CheckPassword(hashed interface{}, plain interface{}) *AuthUtil_CheckPassword_Call {
	return &AuthUtil_CheckPassword_Call{Call: _e.mock.On("CheckPassword", hashed, plain)}
}

func (_c *AuthUtil_CheckPassword_Call) Run(run func(hashed string, plain string)) *AuthUtil_CheckPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *AuthUtil_CheckPassword_Call) Return(_a0 bool) *AuthUtil_CheckPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthUtil_CheckPassword_Call) RunAndReturn(run func(string, string) bool) *AuthUtil_CheckPassword_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateAccessToken provides a mock function with given fields: role, secret
func (_m *AuthUtil) GenerateAccessToken(role string, secret string) (string, error) {
	ret := _m.Called(role, secret)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (string, error)); ok {
		return rf(role, secret)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(role, secret)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(role, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthUtil_GenerateAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateAccessToken'
type AuthUtil_GenerateAccessToken_Call struct {
	*mock.Call
}

// GenerateAccessToken is a helper method to define mock.On call
//   - role string
//   - secret string
func (_e *AuthUtil_Expecter) GenerateAccessToken(role interface{}, secret interface{}) *AuthUtil_GenerateAccessToken_Call {
	return &AuthUtil_GenerateAccessToken_Call{Call: _e.mock.On("GenerateAccessToken", role, secret)}
}

func (_c *AuthUtil_GenerateAccessToken_Call) Run(run func(role string, secret string)) *AuthUtil_GenerateAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *AuthUtil_GenerateAccessToken_Call) Return(_a0 string, _a1 error) *AuthUtil_GenerateAccessToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthUtil_GenerateAccessToken_Call) RunAndReturn(run func(string, string) (string, error)) *AuthUtil_GenerateAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthUtil creates a new instance of AuthUtil. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthUtil(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthUtil {
	mock := &AuthUtil{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
